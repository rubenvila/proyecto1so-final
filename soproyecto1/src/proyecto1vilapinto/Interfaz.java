package proyecto1vilapinto;



import javax.swing.JOptionPane;
import proyecto1vilapinto.Simulador;
import proyecto1vilapinto.Proceso;
import proyecto1vilapinto.PCB;
import proyecto1vilapinto.ColaDeProcesos;
import proyecto1vilapinto.PoliticaDePlanificacion;
import java.awt.Color;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel; 
import java.awt.event.ActionListener; 
import java.awt.event.ActionEvent; 
import org.netbeans.lib.awtextra.AbsoluteLayout;
import javax.swing.JPanel;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.Component;
import javax.swing.DefaultListModel;

/**
 *
 * @author Luisitus
 */
public class Interfaz extends javax.swing.JFrame {
    private Simulador simulator;
    private boolean isSimulationActive = false; 
    private Timer timer;
    
    
    public Interfaz() {
        initComponents();
        simulator = new Simulador(2,this);
        updateButtonStates(); 
        setTitle("Process Simulator");
        disableJPanel(IOBoundPanel, IOBoundOption.isSelected());
        enablePanels(false);
        LabelGlobalClockSimulation.setText("Global Clock Cycle Number: 0");
        ExecutionModeLabel.setText("");
        BotonGuardar.setVisible(isSimulationActive);
        for (PoliticaDePlanificacion policy : PoliticaDePlanificacion.values()) {
            PoliticaDePlaneoSelec.addItem(policy.toString());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProcessTypeGroup = new javax.swing.ButtonGroup();
        ActiveProcessorsGroup = new javax.swing.ButtonGroup();
        PanelSimulacion = new javax.swing.JPanel();
        PanelMetricaRendimiento = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        PanelDetalleSimulacion = new javax.swing.JPanel();
        PanelDetalles = new javax.swing.JPanel();
        ExecutionModeLabel = new javax.swing.JLabel();
        LabelProcePorProcesador = new javax.swing.JLabel();
        LabelGlobalClockSimulation = new javax.swing.JLabel();
        LabelModo = new javax.swing.JLabel();
        TableProcessorsPanel = new javax.swing.JPanel();
        PanelCola = new javax.swing.JPanel();
        LabelListoCola = new javax.swing.JLabel();
        LabelBloqueoCola = new javax.swing.JLabel();
        LabelFinalizadosCola = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ReadyQueueList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        FinishedQueueList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        BlockedQueueList = new javax.swing.JList<>();
        PCBScrollPane = new javax.swing.JScrollPane();
        PCBMainPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        PanelConfiguraciones = new javax.swing.JPanel();
        PanelDetallesProceso = new javax.swing.JPanel();
        LabelTipoProceso = new javax.swing.JLabel();
        IOBoundOption = new javax.swing.JRadioButton();
        CPUBoundOption = new javax.swing.JRadioButton();
        BotonAgregarPro = new javax.swing.JButton();
        ProcessNameLabel = new javax.swing.JLabel();
        TextoNombreProceso = new javax.swing.JTextField();
        LabelNroInstrucciones = new javax.swing.JLabel();
        ProcessInstructionsTextField = new javax.swing.JTextField();
        IOBoundPanel = new javax.swing.JPanel();
        LabelCicloSatisExcep = new javax.swing.JLabel();
        LabelCiclosGenExcep = new javax.swing.JLabel();
        CicloSatisExcepSpinner = new javax.swing.JSpinner();
        CicloGeneExcepSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaProcesos = new javax.swing.JTable();
        BotonLimpiar = new javax.swing.JButton();
        BotonBorrar = new javax.swing.JButton();
        PanelEspeSistema = new javax.swing.JPanel();
        PlanningPolicyLabel = new javax.swing.JLabel();
        CicleDurationLabel = new javax.swing.JLabel();
        TextoProcesosActivos = new javax.swing.JLabel();
        CycleDurationTextField = new javax.swing.JTextField();
        PoliticaDePlaneoSelec = new javax.swing.JComboBox<>();
        TwoProcessorsOption = new javax.swing.JRadioButton();
        ThreeProcessorsOption = new javax.swing.JRadioButton();
        TimeUnitComboBox = new javax.swing.JComboBox<>();
        BotonGuardar = new javax.swing.JButton();
        BotonStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1300, 725));
        setResizable(false);
        setSize(new java.awt.Dimension(1300, 725));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelSimulacion.setBackground(new java.awt.Color(204, 204, 255));
        PanelSimulacion.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PanelSimulacion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelMetricaRendimiento.setBackground(new java.awt.Color(204, 204, 255));
        PanelMetricaRendimiento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Metricas del Rendimiento del Sistema", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Geeza Pro", 3, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        PanelMetricaRendimiento.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("No information available yet.");
        PanelMetricaRendimiento.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, -1, -1));

        PanelSimulacion.add(PanelMetricaRendimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 390, 440));

        PanelDetalleSimulacion.setBackground(new java.awt.Color(204, 204, 255));
        PanelDetalleSimulacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulacion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        PanelDetalleSimulacion.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PanelDetalleSimulacion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelDetalles.setBackground(new java.awt.Color(204, 204, 255));
        PanelDetalles.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalles", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N
        PanelDetalles.setForeground(new java.awt.Color(0, 0, 0));
        PanelDetalles.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ExecutionModeLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ExecutionModeLabel.setForeground(new java.awt.Color(51, 204, 0));
        ExecutionModeLabel.setText("...");
        PanelDetalles.add(ExecutionModeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 270, -1));

        LabelProcePorProcesador.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LabelProcePorProcesador.setForeground(new java.awt.Color(0, 0, 0));
        LabelProcePorProcesador.setText("Procesos por Procesador:");
        PanelDetalles.add(LabelProcePorProcesador, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 380, -1));

        LabelGlobalClockSimulation.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LabelGlobalClockSimulation.setForeground(new java.awt.Color(0, 0, 0));
        LabelGlobalClockSimulation.setText("Global Clock Cycle Number:");
        PanelDetalles.add(LabelGlobalClockSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 340, -1));

        LabelModo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LabelModo.setForeground(new java.awt.Color(0, 0, 0));
        LabelModo.setText("Modo de Ejecucion:");
        PanelDetalles.add(LabelModo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 110, -1));

        TableProcessorsPanel.setBackground(new java.awt.Color(204, 204, 255));
        TableProcessorsPanel.setForeground(new java.awt.Color(0, 0, 0));
        PanelDetalles.add(TableProcessorsPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 340, 80));

        PanelDetalleSimulacion.add(PanelDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 460, 210));

        PanelCola.setBackground(new java.awt.Color(204, 204, 255));
        PanelCola.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cola", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N
        PanelCola.setForeground(new java.awt.Color(0, 0, 0));
        PanelCola.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelListoCola.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LabelListoCola.setForeground(new java.awt.Color(0, 0, 0));
        LabelListoCola.setText("Listo");
        PanelCola.add(LabelListoCola, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 90, -1));

        LabelBloqueoCola.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LabelBloqueoCola.setForeground(new java.awt.Color(0, 0, 0));
        LabelBloqueoCola.setText("Bloqueado");
        PanelCola.add(LabelBloqueoCola, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 90, -1));

        LabelFinalizadosCola.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LabelFinalizadosCola.setForeground(new java.awt.Color(0, 0, 0));
        LabelFinalizadosCola.setText("Finalizado");
        PanelCola.add(LabelFinalizadosCola, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 90, -1));

        ReadyQueueList.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        ReadyQueueList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ReadyQueueList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ReadyQueueList.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        ReadyQueueList.setSelectionBackground(null);
        ReadyQueueList.setVerifyInputWhenFocusTarget(false);
        jScrollPane5.setViewportView(ReadyQueueList);

        PanelCola.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 90, 120));

        FinishedQueueList.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        FinishedQueueList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        FinishedQueueList.setSelectionBackground(null);
        jScrollPane6.setViewportView(FinishedQueueList);

        PanelCola.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 90, 120));

        BlockedQueueList.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        jScrollPane2.setViewportView(BlockedQueueList);

        PanelCola.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 90, 120));

        PanelDetalleSimulacion.add(PanelCola, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 460, 180));

        PanelSimulacion.add(PanelDetalleSimulacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, 490, 440));

        PCBScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bloques de Control de Procesos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 13), new java.awt.Color(0, 0, 0))); // NOI18N

        PCBMainPanel.setBackground(new java.awt.Color(204, 204, 255));
        PCBMainPanel.setAutoscrolls(true);
        PCBMainPanel.add(jSeparator1);

        PCBScrollPane.setViewportView(PCBMainPanel);

        PanelSimulacion.add(PCBScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 390, 440));

        getContentPane().add(PanelSimulacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 1300, 460));

        PanelConfiguraciones.setBackground(new java.awt.Color(204, 204, 255));
        PanelConfiguraciones.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PanelDetallesProceso.setBackground(new java.awt.Color(204, 204, 255));
        PanelDetallesProceso.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalles del Proceso", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        PanelDetallesProceso.setForeground(new java.awt.Color(0, 0, 0));
        PanelDetallesProceso.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PanelDetallesProceso.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelTipoProceso.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        LabelTipoProceso.setForeground(new java.awt.Color(0, 0, 0));
        LabelTipoProceso.setText("Tipo de Proceso:");
        PanelDetallesProceso.add(LabelTipoProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 230, -1));

        ProcessTypeGroup.add(IOBoundOption);
        IOBoundOption.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        IOBoundOption.setForeground(new java.awt.Color(0, 0, 0));
        IOBoundOption.setSelected(true);
        IOBoundOption.setText("I/O Bound");
        IOBoundOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IOBoundOptionActionPerformed(evt);
            }
        });
        PanelDetallesProceso.add(IOBoundOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, -1));

        ProcessTypeGroup.add(CPUBoundOption);
        CPUBoundOption.setFont(CPUBoundOption.getFont().deriveFont(CPUBoundOption.getFont().getStyle() | java.awt.Font.BOLD, CPUBoundOption.getFont().getSize()-1));
        CPUBoundOption.setForeground(new java.awt.Color(0, 0, 0));
        CPUBoundOption.setText("CPU Bound");
        CPUBoundOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CPUBoundOptionActionPerformed(evt);
            }
        });
        PanelDetallesProceso.add(CPUBoundOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, -1, -1));

        BotonAgregarPro.setBackground(new java.awt.Color(0, 102, 204));
        BotonAgregarPro.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        BotonAgregarPro.setForeground(new java.awt.Color(255, 255, 255));
        BotonAgregarPro.setText("Agregar Proceso");
        BotonAgregarPro.setBorderPainted(false);
        BotonAgregarPro.setOpaque(true);
        BotonAgregarPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAgregarProActionPerformed(evt);
            }
        });
        PanelDetallesProceso.add(BotonAgregarPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, 200, 30));

        ProcessNameLabel.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        ProcessNameLabel.setForeground(new java.awt.Color(0, 0, 0));
        ProcessNameLabel.setText("Nombre del Proceso:");
        PanelDetallesProceso.add(ProcessNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 230, -1));

        TextoNombreProceso.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        TextoNombreProceso.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TextoNombreProceso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextoNombreProcesoKeyTyped(evt);
            }
        });
        PanelDetallesProceso.add(TextoNombreProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 250, -1));

        LabelNroInstrucciones.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        LabelNroInstrucciones.setForeground(new java.awt.Color(0, 0, 0));
        LabelNroInstrucciones.setText("Numero de Instrucciones:");
        PanelDetallesProceso.add(LabelNroInstrucciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 240, -1));

        ProcessInstructionsTextField.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        ProcessInstructionsTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ProcessInstructionsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ProcessInstructionsTextFieldKeyTyped(evt);
            }
        });
        PanelDetallesProceso.add(ProcessInstructionsTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 250, -1));

        IOBoundPanel.setBackground(new java.awt.Color(204, 204, 255));
        IOBoundPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelCicloSatisExcep.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        LabelCicloSatisExcep.setForeground(new java.awt.Color(0, 0, 0));
        LabelCicloSatisExcep.setText("Ciclos para satisfacer una Excepcion");
        IOBoundPanel.add(LabelCicloSatisExcep, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        LabelCiclosGenExcep.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        LabelCiclosGenExcep.setForeground(new java.awt.Color(0, 0, 0));
        LabelCiclosGenExcep.setText("Ciclos para generar una excepcion:");
        IOBoundPanel.add(LabelCiclosGenExcep, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, -1, -1));

        CicloSatisExcepSpinner.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CicloSatisExcepSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        IOBoundPanel.add(CicloSatisExcepSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 70, 20));

        CicloGeneExcepSpinner.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        CicloGeneExcepSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        IOBoundPanel.add(CicloGeneExcepSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 70, 20));

        PanelDetallesProceso.add(IOBoundPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 290, 110));

        TablaProcesos.setAutoCreateRowSorter(true);
        TablaProcesos.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        TablaProcesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre del Proceso", "Tipo de Proceso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaProcesos.setSelectionBackground(new java.awt.Color(169, 217, 241));
        TablaProcesos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TablaProcesos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(TablaProcesos);

        PanelDetallesProceso.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 270, 220));

        BotonLimpiar.setBackground(new java.awt.Color(0, 102, 255));
        BotonLimpiar.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        BotonLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        BotonLimpiar.setText("Limpiar");
        BotonLimpiar.setBorderPainted(false);
        BotonLimpiar.setOpaque(true);
        BotonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLimpiarActionPerformed(evt);
            }
        });
        PanelDetallesProceso.add(BotonLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 270, 110, 30));

        BotonBorrar.setBackground(new java.awt.Color(0, 102, 255));
        BotonBorrar.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        BotonBorrar.setForeground(new java.awt.Color(255, 255, 255));
        BotonBorrar.setText("Borrar");
        BotonBorrar.setBorderPainted(false);
        BotonBorrar.setOpaque(true);
        BotonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBorrarActionPerformed(evt);
            }
        });
        PanelDetallesProceso.add(BotonBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, 110, 30));

        PanelConfiguraciones.add(PanelDetallesProceso, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 320));

        PanelEspeSistema.setBackground(new java.awt.Color(204, 204, 255));
        PanelEspeSistema.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Especificaciones del Sistema", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        PanelEspeSistema.setForeground(new java.awt.Color(0, 0, 0));
        PanelEspeSistema.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PlanningPolicyLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PlanningPolicyLabel.setForeground(new java.awt.Color(0, 0, 0));
        PlanningPolicyLabel.setText("Politica de Planeo:");
        PanelEspeSistema.add(PlanningPolicyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 210, -1));

        CicleDurationLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        CicleDurationLabel.setForeground(new java.awt.Color(0, 0, 0));
        CicleDurationLabel.setText("Duracion del Ciclo:");
        PanelEspeSistema.add(CicleDurationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 230, -1));

        TextoProcesosActivos.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        TextoProcesosActivos.setForeground(new java.awt.Color(0, 0, 0));
        TextoProcesosActivos.setText("Numero de Procesadores activos:");
        PanelEspeSistema.add(TextoProcesosActivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 210, -1));

        CycleDurationTextField.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        CycleDurationTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        CycleDurationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CycleDurationTextFieldKeyTyped(evt);
            }
        });
        PanelEspeSistema.add(CycleDurationTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 200, -1));

        PoliticaDePlaneoSelec.setFont(new java.awt.Font("Geneva", 0, 13)); // NOI18N
        PoliticaDePlaneoSelec.setBorder(null);
        PanelEspeSistema.add(PoliticaDePlaneoSelec, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 150, -1));

        ActiveProcessorsGroup.add(TwoProcessorsOption);
        TwoProcessorsOption.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        TwoProcessorsOption.setForeground(new java.awt.Color(0, 0, 0));
        TwoProcessorsOption.setSelected(true);
        TwoProcessorsOption.setText("2");
        PanelEspeSistema.add(TwoProcessorsOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, -1, -1));

        ActiveProcessorsGroup.add(ThreeProcessorsOption);
        ThreeProcessorsOption.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        ThreeProcessorsOption.setForeground(new java.awt.Color(0, 0, 0));
        ThreeProcessorsOption.setText("3");
        PanelEspeSistema.add(ThreeProcessorsOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, -1, -1));

        TimeUnitComboBox.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        TimeUnitComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "s", "ms" }));
        PanelEspeSistema.add(TimeUnitComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, -1, -1));

        BotonGuardar.setBackground(new java.awt.Color(0, 102, 204));
        BotonGuardar.setFont(new java.awt.Font("Geneva", 1, 11)); // NOI18N
        BotonGuardar.setForeground(new java.awt.Color(255, 255, 255));
        BotonGuardar.setText("Guardar");
        BotonGuardar.setBorderPainted(false);
        BotonGuardar.setOpaque(true);
        BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGuardarActionPerformed(evt);
            }
        });
        PanelEspeSistema.add(BotonGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 90, 30));

        PanelConfiguraciones.add(PanelEspeSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 0, 310, 320));

        BotonStart.setBackground(new java.awt.Color(51, 204, 0));
        BotonStart.setFont(new java.awt.Font("Geneva", 1, 14)); // NOI18N
        BotonStart.setForeground(new java.awt.Color(0, 0, 0));
        BotonStart.setText("Comenzar Simulacion");
        BotonStart.setBorderPainted(false);
        BotonStart.setOpaque(true);
        BotonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonStartActionPerformed(evt);
            }
        });
        PanelConfiguraciones.add(BotonStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 20, 310, 40));

        getContentPane().add(PanelConfiguraciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 320));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Boton de limpiar tabla de procesos
    private void BotonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLimpiarActionPerformed
        int response = JOptionPane.showConfirmDialog(
            null,
            "Seguro que quiere Limpiar los procesos?",
            "Si",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            simulator.getColaGeneral().limpiar();
            updateInterface(); 
            updateButtonStates();
            JOptionPane.showMessageDialog(null, "Cola de procesos limpiada con exito!", "Exito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            System.out.println("Limpiado de Procesos cancelado."); 
        }
    }//GEN-LAST:event_BotonLimpiarActionPerformed

    //Boton de Iniciar Simulacion o Finalizar la Simulación
    private void BotonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonStartActionPerformed
        if (CycleDurationTextField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Introduzca una Duracion de Ciclo.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (isSimulationActive) { 
            int response = JOptionPane.showConfirmDialog(
        this, 
        "Seguro que quiere borrar los datos de simulacion?", 
        "Confirmar", 
        JOptionPane.YES_NO_OPTION, 
        JOptionPane.QUESTION_MESSAGE 
            );
            if (response == JOptionPane.YES_OPTION) {
                // Detener la simulación
                stopSimulation(); 
                isSimulationActive = false;
                BotonGuardar.setVisible(isSimulationActive);
                //Reestablecer estilos del boton
                BotonStart.setText("Comenzar Simulacion");
                BotonStart.setBackground(new Color(181,241,169));
                BotonStart.setForeground(Color.BLACK);
                return; 
            } else {
                return;
            }  
        } else { 
            saveToFile(); 
            updatePCBSandQueues(); 
            disablePanels(false); 
            enablePanels(true);
            // Cambiar el botón a "Detener Simulation"
            BotonStart.setText("Detener Simulacion");
            BotonStart.setBackground(Color.RED);
            BotonStart.setForeground(Color.WHITE);
            int cycleDuration = Integer.parseInt(CycleDurationTextField.getText());
            simulator.setDuracionCiclo(cycleDuration);
            int numProcessors = TwoProcessorsOption.isSelected() ? 2 : 3;
            simulator.setNumProcesadores(numProcessors); 
            String selectedItem = PoliticaDePlaneoSelec.getSelectedItem().toString();
            if (selectedItem != null) {
                 PoliticaDePlanificacion policy = PoliticaDePlanificacion.fromString(selectedItem);
                simulator.PoliticaDePlanificacion(policy);
               // simulator.reorderAndSetReadyQueue(); // Imprime la política seleccionada
            } else {
                System.out.println("No se ha seleccionado ninguna política.");
            }
            
            Interfaz.ExecutionModeLabel.setText("User"); //Ejecucion en modo usuario
            // Crear y empezar el temporizador
            timer = new Timer(cycleDuration * 1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isSimulationActive) { 
                    timer.stop(); 
                    simulator.setCicloGlobal(0);
                    return; 
                }
                
                simulator.ejecutarCiclo();
                LabelGlobalClockSimulation.setText("Global Clock Cycle Number: " + simulator.getCicloGlobal());
                updatePCBSandQueues(); 
                TableProcessorsPanel.removeAll();
                ProcesadorTablas table = new ProcesadorTablas(simulator.actualizarTablaDeProcesos());
                TableProcessorsPanel.add(table);
                }
            });

            timer.start(); // Iniciar el temporizador
            isSimulationActive = true; 
            BotonGuardar.setVisible(isSimulationActive);
            //System.out.println("CICLO INICIAL 2");
            updatePCBSandQueues();
        }
    }//GEN-LAST:event_BotonStartActionPerformed
    
    private void IOBoundOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IOBoundOptionActionPerformed
        disableJPanel(IOBoundPanel,true);
    }//GEN-LAST:event_IOBoundOptionActionPerformed

    //Añadir proceso
    private void BotonAgregarProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAgregarProActionPerformed
       // Validar campos
        String message = "Atencion: Rellene todos los campos requeridos."; 
        if (ProcessInstructionsTextField.getText().isEmpty() || TextoNombreProceso.getText().isEmpty()  ) {
            JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.WARNING_MESSAGE);
            return; 
        }

        String name = TextoNombreProceso.getText();
        if (simulator.getColaGeneral().contieneNombre(name)) { 
            JOptionPane.showMessageDialog(null, "Un proceso con ese nombre ya existe.", "Error", JOptionPane.WARNING_MESSAGE);
            return; 
        }

        boolean esCpuLimitado = CPUBoundOption.isSelected();
        int exceptionCycle = (int) CicloGeneExcepSpinner.getValue();
        int satisfactionCycle = (int) CicloSatisExcepSpinner.getValue();
        int numberOfInstructions = Integer.parseInt(ProcessInstructionsTextField.getText().trim());
        String texto1 = ProcessInstructionsTextField.getText();
        int numeroInt = Integer.parseInt(texto1);
        int valorSpinner = (Integer) CicloGeneExcepSpinner.getValue();
        int valorSpinner1 = (Integer) CicloSatisExcepSpinner.getValue();

        
        // Crear el proceso String nombre, int instrucciones, boolean esCpuLimitado, int ciclosDeExcepción, int ciclosDeSatisfacción, Simulador simulador
        Proceso proceso = new Proceso(name, numeroInt, esCpuLimitado,valorSpinner , valorSpinner1, simulator); //id se asigna automatico
        simulator.getColaListos().agregar(proceso);
        // Agregar el proceso al simulador
 //       ProcessQueue readyQueue = new ProcessQueue(3);
        simulator.agregarProceso(proceso);

        DefaultTableModel modelo = (DefaultTableModel) TablaProcesos.getModel();
        modelo.addRow(new Object[]{proceso.getNombre(), esCpuLimitado ? "CPU Bound" : "I/O Bound"});
        JOptionPane.showMessageDialog(null, "Proceso Creado!", "Exito", JOptionPane.INFORMATION_MESSAGE);
        resetFields();
        updateButtonStates();
    }//GEN-LAST:event_BotonAgregarProActionPerformed

    //Borrar un proceso de la cola
    private void BotonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBorrarActionPerformed
       Proceso selectedProcess = getSelectedProcess(); 
        if (selectedProcess != null) {
            if (simulator.getColaGeneral().eliminar(selectedProcess)) { 
                updateInterface();
                JOptionPane.showMessageDialog(null, "Proceso borrado con exito!", "Exito", JOptionPane.INFORMATION_MESSAGE);
                updateButtonStates();
            } else {
                JOptionPane.showMessageDialog(null, "Proceso no encontrado en la cola.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay un proceso seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BotonBorrarActionPerformed

    private void CPUBoundOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CPUBoundOptionActionPerformed
        disableJPanel(IOBoundPanel,false);
        resetSpinners();
    }//GEN-LAST:event_CPUBoundOptionActionPerformed

    private void ProcessInstructionsTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProcessInstructionsTextFieldKeyTyped
        char c = evt.getKeyChar();
        if(c < '0' || c > '9') evt.consume();
    }//GEN-LAST:event_ProcessInstructionsTextFieldKeyTyped

    private void CycleDurationTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CycleDurationTextFieldKeyTyped
        char c = evt.getKeyChar();
        if(c < '0' || c > '9') evt.consume();
    }//GEN-LAST:event_CycleDurationTextFieldKeyTyped

    private void TextoNombreProcesoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextoNombreProcesoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetterOrDigit(c) && c != ' ') {
            evt.consume(); 
        }
    }//GEN-LAST:event_TextoNombreProcesoKeyTyped

    private void BotonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActionPerformed
        //Cambiar los argumentos de System Specifications
        simulator.clasificarProcesos();
        String selectedItem = PoliticaDePlaneoSelec.getSelectedItem().toString();
            if (selectedItem != null) {
                PoliticaDePlanificacion policy = PoliticaDePlanificacion.fromString(selectedItem);
                simulator.PoliticaDePlanificacion(policy);
                //simulator.reorderAndSetReadyQueue(); 
                System.out.println("Politica: " + policy);
            } else {
                System.out.println("No se ha seleccionado ninguna política.");
            }
    }//GEN-LAST:event_BotonGuardarActionPerformed
    
    
    //FUNCIONES
    
    // Actualizar la tabla de procesos listos
    public void updateInterface() {
        DefaultTableModel modeloListos = (DefaultTableModel) TablaProcesos.getModel();
        modeloListos.setRowCount(0);
        for (int i = 0; i < simulator.getColaGeneral().tamaño(); i++) { //revisar esto
            Proceso proceso = simulator.getColaGeneral().obtener(i);
            modeloListos.addRow(new Object[]{proceso.getNombre(), proceso.esCpuLimitado() ? "CPU Bound" : "I/O Bound"});
        }
    }
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(() -> {
            new Interfaz().setVisible(true);
        });
    }
    
    
    //Paneles deshabilitados antes de la simulación
    public void enablePanels(boolean value) {
        disableJPanel(PanelDetalleSimulacion, value);
        disableJPanel(PanelDetalles,value);
        disableJPanel(PanelCola,value);
        disableJPanel(PCBMainPanel,value);
        ReadyQueueList.setEnabled(value);
        BlockedQueueList.setEnabled(value);
        FinishedQueueList.setEnabled(value);
    } 
    
    //Paneles deshabilitados al iniciar la simulación
    public void disablePanels(boolean value) {
        disableJPanel(PanelDetallesProceso, value);
        disableJPanel(IOBoundPanel, value);
        TablaProcesos.setEnabled(value);
    }
    
    
    //Función para deshabilitar paneles
    public void disableJPanel(JPanel panel, boolean value) {
        for (Component a : panel.getComponents()) {
            a.setEnabled(value);
        }
    }
    
    //Devolver spinner a su valor original
    private void resetSpinners() {
        CicloGeneExcepSpinner.setValue(1);
        CicloSatisExcepSpinner.setValue(1);
    }
    
    //devolver campos a su valor original
    private void resetFields() {
        ProcessInstructionsTextField.setText("");
        TextoNombreProceso.setText("");
        resetSpinners();
    }
    
    //Actualizar el estado de los botones
    private void updateButtonStates() {
        boolean isQueueEmpty = simulator.getColaGeneral().estaVacia();
        BotonLimpiar.setEnabled(!isQueueEmpty);
        BotonBorrar.setEnabled(!isQueueEmpty);
        BotonStart.setEnabled(!isQueueEmpty);
    }
    
    //Tomar el proceso seleccionado en tabla
    private Proceso getSelectedProcess() {
        int selectedRow = TablaProcesos.getSelectedRow(); 
        if (selectedRow >= 0) {
            return simulator.getColaGeneral().obtener(selectedRow);
        }
        return null; 
    }
    
    //Finalizar la simulacion de forma arbitraria
    private void stopSimulation() {
        //Limpiar listas
        simulator.reiniciar();
        simulator.getColaGeneral().limpiar();//Limpiar toda la lista de procesos
        simulator.getColaListos().limpiar();//Limpiar la lista de listos
        simulator.getColaBloqueados().limpiar(); //Limpiar la lista de bloqueados
        simulator.getColaFinalizados().limpiar(); //Limpiar la lista de terminados
        updatePCBSandQueues();
        //Limpiar interfaz
        ExecutionModeLabel.setText("");
        updateInterface(); //Limpia la tabla de procesos
        updateButtonStates(); //Cambia el estado de los botones 
        PCBMainPanel.removeAll(); //Limpiar PCBs
        TableProcessorsPanel.removeAll();//Limpiar tabla de procesadores por proceso
        LabelGlobalClockSimulation.setText("Global Clock Cycle Number: 0");
        ReadyQueueList.setModel(new DefaultListModel<>());
        BlockedQueueList.setModel(new DefaultListModel<>());
        FinishedQueueList.setModel(new DefaultListModel<>());
        disableJPanel(IOBoundPanel, IOBoundOption.isSelected());
        disableJPanel(PanelDetallesProceso, true);
        TablaProcesos.setEnabled(true); 
        enablePanels(false);
    }
    
    //Mostrar o actualizar PCBs
    public void updatePCBSandQueues() {
    // Clasificar los procesos en las colas correspondientes
    simulator.clasificarProcesos();

    // Crear nuevos modelos para las listas de la interfaz
    DefaultListModel<String> readyListModel = new DefaultListModel<>();
    DefaultListModel<String> blockedListModel = new DefaultListModel<>();
    DefaultListModel<String> finishedListModel = new DefaultListModel<>();

    // Obtener los nombres de los procesos en cada cola y agregarlos a los modelos
    for (int i = 0; i < simulator.getColaListos().tamaño(); i++) {
        Proceso proceso = simulator.getColaListos().obtener(i);
        readyListModel.addElement(proceso.getNombre());
    }

    for (int i = 0; i < simulator.getColaBloqueados().tamaño(); i++) {
        Proceso proceso = simulator.getColaBloqueados().obtener(i);
        blockedListModel.addElement(proceso.getNombre());
    }

    for (int i = 0; i < simulator.getColaFinalizados().tamaño(); i++) {
        Proceso proceso = simulator.getColaFinalizados().obtener(i);
        finishedListModel.addElement(proceso.getNombre());
    }

    // Asignar los nuevos modelos a las listas de la interfaz
    ReadyQueueList.setModel(readyListModel);
    BlockedQueueList.setModel(blockedListModel);
    FinishedQueueList.setModel(finishedListModel);

    // Actualizar los PCBs en la interfaz gráfica
    PCBMainPanel.removeAll();
    ColaDeProcesos allProcess = simulator.getColaGeneral();
    if (allProcess.tamaño() > 0) {
        for (int i = 0; i < allProcess.tamaño(); i++) {
            Proceso proceso = allProcess.obtener(i);
            if (proceso != null) {
                PCB processPanel = new PCB(proceso);
                PCBMainPanel.add(processPanel);
            }
        }
    }
    PCBMainPanel.revalidate();
    PCBMainPanel.repaint();
}

    //Txt config
    private void saveToFile() {
    String filename = System.getProperty("user.dir") + "/Resultado.txt";
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
        writer.write("#Simulation Data");
        writer.newLine();

        writer.write("#PROCESS");
        writer.newLine();

        simulator.getColaGeneral().iterarProcesos(writer);

        writer.newLine();
        writer.write("#CONFIG");
        writer.newLine();

        writer.write("Cycle Duration: " + CycleDurationTextField.getText().trim());
        writer.newLine();
        writer.write("Numero de Procesadores Activos: " + 
                     (TwoProcessorsOption.isSelected() ? "2" : "3"));
        writer.newLine();
        writer.write("Politica de Planeo: " + PoliticaDePlaneoSelec.getSelectedItem());
        writer.newLine();

        JOptionPane.showMessageDialog(null, "Tu simulacion se guardo en: " + filename);
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Error, Los datos no se guardaron");
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ActiveProcessorsGroup;
    private javax.swing.JList<String> BlockedQueueList;
    private javax.swing.JButton BotonAgregarPro;
    private javax.swing.JButton BotonBorrar;
    private javax.swing.JButton BotonGuardar;
    private javax.swing.JButton BotonLimpiar;
    private javax.swing.JButton BotonStart;
    private javax.swing.JRadioButton CPUBoundOption;
    private javax.swing.JLabel CicleDurationLabel;
    private javax.swing.JSpinner CicloGeneExcepSpinner;
    private javax.swing.JSpinner CicloSatisExcepSpinner;
    private javax.swing.JTextField CycleDurationTextField;
    public static javax.swing.JLabel ExecutionModeLabel;
    private javax.swing.JList<String> FinishedQueueList;
    private javax.swing.JRadioButton IOBoundOption;
    private javax.swing.JPanel IOBoundPanel;
    private javax.swing.JLabel LabelBloqueoCola;
    private javax.swing.JLabel LabelCicloSatisExcep;
    private javax.swing.JLabel LabelCiclosGenExcep;
    private javax.swing.JLabel LabelFinalizadosCola;
    private javax.swing.JLabel LabelGlobalClockSimulation;
    private javax.swing.JLabel LabelListoCola;
    private javax.swing.JLabel LabelModo;
    private javax.swing.JLabel LabelNroInstrucciones;
    private javax.swing.JLabel LabelProcePorProcesador;
    private javax.swing.JLabel LabelTipoProceso;
    private javax.swing.JPanel PCBMainPanel;
    private javax.swing.JScrollPane PCBScrollPane;
    private javax.swing.JPanel PanelCola;
    private javax.swing.JPanel PanelConfiguraciones;
    private javax.swing.JPanel PanelDetalleSimulacion;
    private javax.swing.JPanel PanelDetalles;
    private javax.swing.JPanel PanelDetallesProceso;
    private javax.swing.JPanel PanelEspeSistema;
    private javax.swing.JPanel PanelMetricaRendimiento;
    private javax.swing.JPanel PanelSimulacion;
    private javax.swing.JLabel PlanningPolicyLabel;
    private javax.swing.JComboBox<String> PoliticaDePlaneoSelec;
    private javax.swing.JTextField ProcessInstructionsTextField;
    private javax.swing.JLabel ProcessNameLabel;
    private javax.swing.ButtonGroup ProcessTypeGroup;
    private javax.swing.JList ReadyQueueList;
    private javax.swing.JTable TablaProcesos;
    private javax.swing.JPanel TableProcessorsPanel;
    private javax.swing.JTextField TextoNombreProceso;
    private javax.swing.JLabel TextoProcesosActivos;
    private javax.swing.JRadioButton ThreeProcessorsOption;
    private javax.swing.JComboBox<String> TimeUnitComboBox;
    private javax.swing.JRadioButton TwoProcessorsOption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
